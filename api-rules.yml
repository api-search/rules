rules:
  openapi-security-schemes-error:
    description: Components Security Schemes
    message: Components MUST Have a Security Schemes
    severity: error
    given: $.components
    then:
      field: securitySchemes
      function: truthy
  openapi-security-schemes-info:
    description: Components Security Schemes
    message: Components Have a Security Schemes
    severity: info
    given: $.components
    then:
      field: securitySchemes
      function: falsy
  openapi-components-parameters-error:
    description: Components Parameters
    message: Components MUST Have a Parameters Property
    severity: error
    given: $.components
    then:
      field: parameters
      function: truthy
  openapi-components-parameters-info:
    description: Components Parameters
    message: Components Have a Parameters Property
    severity: info
    given: $.components
    then:
      field: parameters
      function: falsy
  openapi-components-parameters-description-error:
    description: Component Parameter Description
    message: Parameters MUST Have a Description
    given: $.paths.*.*.parameters.*
    then:
      field: description
      function: truthy
  openapi-components-parameters-description-info:
    description: Component Parameter Description
    message: Parameters Have a Description
    severity: info
    given: $.components.parameters.*
    then:
      field: description
      function: falsy
  openapi-components-parameters-description-length-error:
    description: Component Parameter Description Length
    message: Parameters Description MUST Be Less Than 500 Characters
    given: $.components.parameters.*
    then:
      field: summary
      function: length
      functionOptions:
        max: 500
  openapi-components-parameters-enum-casing-error:
    description: Component Parameter Enum Casing
    message: Parameters Enums MUST Must Be Upper Snake Case
    severity: error
    given: $.components.parameters.*.enum.*
    then:
      function: pattern
      functionOptions:
        notMatch: ^[A-Z]+(?:_[A-Z]+)*$
  openapi-components-parameters-enum-casing-info:
    description: Component Parameter Enum Casing
    message: Parameters Enums Are Upper Snake Case
    severity: info
    given: $.components.parameters.*.enum.*
    then:
      function: pattern
      functionOptions:
        match: ^[A-Z]+(?:_[A-Z]+)*$
  openapi-components-parameters-enum-info:
    description: Component Parameter Enum
    message: Parameters Have Enum
    severity: info
    given: $.components.parameters.*
    then:
      field: enum
      function: falsy
  openapi-components-parameters-in-error:
    description: Component Parameter In
    message: Parameters In Property MUST Be Set
    given: $.components.parameters.*
    then:
      field: in
      function: truthy
  openapi-components-parameters-in-info:
    description: Component Parameter In
    message: Parameters In Property Is Set
    severity: info
    given: $.components.parameters.*
    then:
      field: in
      function: falsy
  openapi-components-parameters-name-error:
    description: Component Parameter Name
    message: Parameters MUST Have a Name
    severity: error
    given: $.components.parameters.*
    then:
      field: name
      function: truthy
  openapi-components-parameters-name-info:
    description: Component Parameter Name
    message: Parameters Have a Name
    severity: info
    given: $.components.parameters.*
    then:
      field: name
      function: falsy
  openapi-components-parameters-name-length-error:
    description: Component Parameter Name Length
    message: Parameters Name Length MUST Be Less Than 25 Characters
    given: $.components.parameters[?(@.in=='path')].name
    then:
      field: summary
      function: length
      functionOptions:
        max: 25
  openapi-components-parameters-casing-camel-warn:
    description: Component Parameter Name Casing
    message: Parameters Names MUST Be Camel Case
    severity: warn
    given: $.components.parameters.*
    then:
      - field: name
        function: pattern
        functionOptions:
          notMatch: ^[a-z]+(?:[A-Z][a-z]+)*$
      - field: name
        function: pattern
        functionOptions:
          match: ^[A-Z](([a-z0-9]+[A-Z]?)*)$ 
  openapi-components-parameters-casing-camel-info:
    description: Component Parameter Name Casing
    message: Parameters Names Are Camel Case
    severity: info
    given: $.components.parameters.*
    then:
      - field: name
        function: pattern
        functionOptions:
          notMatch: ^[a-z]+(?:[A-Z][a-z]+)*$
      - field: name
        function: pattern
        functionOptions:
          match: ^[A-Z](([a-z0-9]+[A-Z]?)*)$ 
  openapi-components-parameters-schema-error:
    description: Component Parameter Schema
    message: Parameters MUST Have Schema
    given: $.components.parameters.*
    then:
      field: schema
      function: truthy
  openapi-components-parameters-schema-info:
    description: Component Parameter Schema
    message: Parameters Have Schema
    severity: info
    given: $.components.parameters.*
    then:
      field: schema
      function: falsy
  openapi-components-parameters-schema-ref-error:
    description: Component Parameter Schema Reference
    message: Parameters MUST Use Schema Reference
    severity: error
    given: $.components.parameters.*.schema
    then:
      field: $ref
      function: falsy
  openapi-components-parameters-schema-ref-info:
    description: Component Parameter Schema Reference
    message: Parameters Use Schema Reference
    severity: info
    given: $.components.parameters.*.schema
    then:
      field: $ref
      function: truthy
  openapi-components-parameters-schema-items-array-info:
    description: Has schema type array items.
    message: Parameter Schema Type Array Items
    severity: info
    given: $.components.parameters.schema[?(@.type=='array')]
    then:
      field: items
      function: falsy
  openapi-components-parameters-schema-oneof-info:
    description: Has parameter schema oneof.
    message: Parameter Schema OneOf
    severity: info
    given: $.components.parameters.*.schema
    then:
      field: oneOf
      function: falsy
  openapi-components-parameters-schema-type-array-error:
    description: Require schema type array items.
    message: Parameter Schema Type Array Items
    given: $.components.parameters.schema[?(@.type=='array')]
    then:
      field: items
      function: truthy
  openapi-components-parameters-schema-type-error:
    description: Require parameter schema type.
    message: Parameter Schema Type
    given: $.components.parameters.*.schema
    then:
      field: type
      function: truthy
  openapi-components-parameters-schema-type-info:
    description: Has parameter schema type.
    message: Parameter Schema Type
    severity: info
    given: $.components.parameters.*.schema
    then:
      field: type
      function: falsy
  openapi-components-parameters-schema-type-integer-maximum-info:
    description: Has parameter schema type integer maximum.
    message: Parameter Schema Type Integer Maximum
    given:
      - $.components.parameters.[?(@.type=='integer')]
    severity: info
    then:
      field: maximum
      function: falsy
  openapi-components-parameters-schema-type-integer-maximum-warn:
    description: Warn parameter schema type integer maximum.
    message: Parameter Schema Type Integer Maximum
    given:
      - $.components.parameters.[?(@.type=='integer')]
    severity: warn
    then:
      field: maximum
      function: truthy
  openapi-components-parameters-schema-type-integer-minimum-info:
    description: Has parameter schema type integer minimum.
    message: Parameter Schema Type Integer Minimum
    given:
      - $.components.parameters.[?(@.type=='integer')]
    severity: info
    then:
      field: minimum
      function: falsy
  openapi-components-parameters-schema-type-integer-minimum-warn:
    description: Warn parameter schema type integer minlength.
    message: Parameter Schema Type Integer Minimum
    given:
      - $.components.parameters.[?(@.type=='integer')]
    severity: warn
    then:
      field: minimum
      function: truthy
  openapi-components-parameters-schema-type-string-maxlength-info:
    description: Has parameter schema type string maxlength.
    message: Parameter Schema Type String MaxLength
    given:
      - $.components.parameters.[?(@.type=='string')]
    severity: info
    then:
      field: maxLength
      function: falsy
  openapi-components-parameters-schema-type-string-maxlength-warn:
    description: Warn parameter schema type string maxlength.
    message: Parameter Schema Type String MaxLength
    given:
      - $.components.parameters.[?(@.type=='string')]
    severity: warn
    then:
      field: maxLength
      function: truthy
  openapi-components-parameters-schema-type-string-minlength-info:
    description: Has parameter schema type string minlength.
    message: Parameter Schema Type String MinLength
    given:
      - $.components.parameters.[?(@.type=='string')]
    severity: info
    then:
      field: minLength
      function: falsy
  openapi-components-parameters-schema-type-string-minlength-warn:
    description: Warn parameter schema type string minlength.
    message: Parameter Schema Type String MinLength
    given:
      - $.components.parameters.[?(@.type=='string')]
    severity: warn
    then:
      field: minLength
      function: truthy
  openapi-components-parameters-schema-type-string-pattern-info:
    description: Has parameter schema type string pattern.
    message: Parameter Schema Type String Pattern
    given:
      - $.components.parameters.[?(@.type=='string')]
    severity: info
    then:
      field: pattern
      function: falsy
  openapi-components-parameters-schema-type-string-pattern-warn:
    description: Warn parameter schema type string pattern.
    message: Parameter Schema Type String Pattern
    given:
      - $.components.parameters.[?(@.type=='string')]
    severity: warn
    then:
      field: pattern
      function: truthy
  openapi-components-examples-error:
    description: Components Examples
    message: Components MUST Have a Examples Property
    severity: error
    given: $.components
    then:
      field: examples
      function: truthy
  openapi-components-examples-info:
    description: Components Examples
    message: Components Have a Examples Property
    severity: info
    given: $.components
    then:
      field: examples
      function: falsy
  openapi-components-schemas-error:
    description: Components Schema
    message: Components MUST Have a Schema Property
    severity: error
    given: $.components
    then:
      field: schemas
      function: truthy
  openapi-components-schemas-info:
    description: Components Schema
    message: Components Have a Schema Property
    severity: info
    given: $.components
    then:
      field: schemas
      function: falsy
  openapi-components-headers-error:
    description: Require components header.
    message: Components MUST Have a Headers Property
    severity: error
    given: $.components
    then:
      field: headers
      function: truthy
  openapi-components-headers-info:
    description: Require components header.
    message: Components Have a Headers Property
    severity: info
    given: $.components
    then:
      field: headers
      function: falsy
  openapi-components-headers-rate-limit-error:
    description: Require components rate limit header.
    message: Components MUST Have Rate Limit Headers
    severity: error
    given: $.components.headers
    then:
      field: RateLimit
      function: truthy
  openapi-components-headers-rate-limit-info:
    description: Require components rate limit header.
    message: Components Have Rate Limit Headers
    severity: info
    given: $.components.headers
    then:
      field: RateLimit
      function: falsy
  openapi-components-headers-retry-after-error:
    description: Require components retry after header.
    message: Components MUST have a retry after headers.
    severity: error
    given: $.components.headers
    then:
      field: Retry-After
      function: truthy
  openapi-components-headers-retry-after-info:
    description: Require components retry after header.
    message: Components has a retry after header.
    severity: info
    given: $.components.headers
    then:
      field: Retry-After
      function: falsy
  openapi-components-responses-info:
    description: Require components responses.
    message: Components has a responses property.
    severity: info
    given: $.components
    then:
      field: responses
      function: falsy
  openapi-components-responses-bad-request-error:
    description: Require components bad request response.
    message: Components MUST have a bad request response.
    severity: error
    given: $.components.responses
    then:
      field: BadRequest
      function: truthy
  openapi-components-responses-bad-request-info:
    description: Require components bad request response.
    message: Components has a bad request response.
    severity: info
    given: $.components.responses
    then:
      field: BadRequest
      function: falsy
  openapi-components-responses-conflict-error:
    description: Require components conflict response.
    message: Components MUST have a conflict response.
    severity: error
    given: $.components.responses
    then:
      field: Conflict
      function: truthy
  openapi-components-responses-conflict-info:
    description: Require components conflict response.
    message: Components has a conflict response.
    severity: info
    given: $.components.responses
    then:
      field: Conflict
      function: falsy
  openapi-components-responses-error:
    description: Require components responses.
    message: Components MUST have a responses property.
    severity: error
    given: $.components
    then:
      field: responses
      function: truthy
  openapi-components-responses-forbidden-error:
    description: Require components forbidden response.
    message: Components MUST have a forbidden response.
    severity: error
    given: $.components.responses
    then:
      field: Forbidden
      function: truthy
  openapi-components-responses-forbidden-info:
    description: Require components forbidden response.
    message: Components has a forbidden response.
    severity: info
    given: $.components.responses
    then:
      field: Forbidden
      function: falsy
  openapi-components-responses-internal-server-error-error:
    description: Require components internal server error response.
    message: Components MUST have a internal server error response.
    severity: error
    given: $.components.responses
    then:
      field: InternalServerError
      function: truthy
  openapi-components-responses-internal-server-error-info:
    description: Require components internal server error response.
    message: Components has a internal server error response.
    severity: info
    given: $.components.responses
    then:
      field: InternalServerError
      function: falsy
  openapi-components-responses-not-found-error:
    description: Require components not found response.
    message: Components MUST have a not found response.
    severity: error
    given: $.components.responses
    then:
      field: NotFound
      function: truthy
  openapi-components-responses-not-found-info:
    description: Require components not found response.
    message: Components has a not found response.
    severity: info
    given: $.components.responses
    then:
      field: NotFound
      function: falsy
  openapi-components-responses-too-many-requests-error:
    description: Require components too many requests response.
    message: Components MUST have a too many requests response.
    severity: error
    given: $.components.responses
    then:
      field: TooManyRequests
      function: truthy
  openapi-components-responses-too-many-requests-info:
    description: Require components too many requests response.
    message: Components has a too many requests response.
    severity: info
    given: $.components.responses
    then:
      field: TooManyRequests
      function: falsy
  openapi-components-responses-unauthorized-error:
    description: Require components unauthorized response.
    message: Components MUST have a unauthorized response.
    severity: error
    given: $.components.responses
    then:
      field: Unauthorized
      function: truthy
  openapi-components-responses-unauthorized-info:
    description: Require components unauthorized response.
    message: Components has a unauthorized response.
    severity: info
    given: $.components.responses
    then:
      field: Unauthorized
      function: falsy
  openapi-external-docs-error:
    description: External Docs
    message: OpenAPI MUST Have External Documentation
    severity: error
    given: $
    then:
      field: externalDocs
      function: truthy
  openapi-external-docs-info:
    description: External Docs
    message: OpenAPI Has External Documentation
    severity: info
    given: $
    then:
      field: externalDocs
      function: falsy
  openapi-info-contact-email-error:
    description: Info Contact Email
    message: Info MUST Have Contact Email
    given: $.info.contact
    severity: error
    then:
      field: email
      function: truthy
  openapi-info-contact-email-info:
    description: Info Contact Email
    message: Info Has Contact Email
    given: $.info.contact
    severity: info
    then:
      field: email
      function: falsy
  openapi-info-contact-error:
    description: Info Contact Object
    message: Info MUST Have Contact Object
    severity: error
    given: $.info
    then:
      field: contact
      function: truthy
  openapi-info-contact-info:
    description: Info Contact Object
    message: Info Has Contact Object
    severity: info
    given: $.info
    then:
      field: contact
      function: falsy
  openapi-info-contact-name-error:
    description: Info Contact Name
    message: Info MUST Have Contact Name
    given: $.info.contact
    severity: error
    then:
      field: name
      function: truthy
  openapi-info-contact-name-info:
    description: Info Contact Name
    message: Info Has Contact Name
    given: $.info.contact
    severity: info
    then:
      field: name
      function: falsy
  openapi-info-contact-url-error:
    description: Info Contact URL
    message: Info MUST Have Contact URL
    given: $.info.contact
    severity: error
    then:
      field: url
      function: truthy
  openapi-info-contact-url-info:
    description: Info Contact URL
    message: Info Has Contact URL
    given: $.info.contact
    severity: info
    then:
      field: url
      function: falsy
  openapi-info-description-error:
    description: Info Description
    message: Info MUST Have Description
    severity: error
    given: $.info
    then:
      field: description
      function: truthy
  openapi-info-description-info:
    description: Info Description
    message: Info Has Description
    severity: info
    given: $.info
    then:
      field: description
      function: falsy
  openapi-info-description-length-error:
    description: Info Description
    message: Info description MUST be less than 500 characters.
    severity: error
    given: $.info
    then:
      field: description
      function: length
      functionOptions:
        max: 500
  openapi-info-error:
    description: Info Object
    message: Info Object MUST Exist
    severity: error
    given: $
    then:
      field: info
      function: truthy
  openapi-info-info:
    description: Info Object
    message: Info Object Exists
    severity: info
    given: $
    then:
      field: info
      function: truthy
  openapi-info-license-error:
    description: Info License
    message: Info MUST Have License
    severity: error
    given: $.info
    then:
      field: license
      function: truthy
  openapi-info-license-info:
    description: Info License
    message: Info Has License
    severity: info
    given: $.info
    then:
      field: license
      function: falsy
  openapi-info-license-identifier-cc-by-nc-sa-error:
    description: Info License
    message: Info MUST Have CC-BY-NC-SA 4.0 License
    given: $.info.license
    severity: error
    then:
      field: identifier
      function: pattern
      functionOptions:
        match: ^\b(CC-BY-NC-SA-4.0)\b
  openapi-info-license-identifier-cc-by-nc-sa-info:
    description: Info License
    message: Info Has CC-BY-NC-SA 4.0 License
    given: $.info.license
    severity: info
    then:
      field: identifier
      function: pattern
      functionOptions:
        match: ^\b(CC-BY-NC-SA-4.0)\b
  openapi-info-license-identifier-error:
    description: Info License Identifier
    message: Info MUST Have License Identifier
    given: $.info.license
    severity: error
    then:
      field: identifier
      function: truthy
  openapi-info-license-identifier-info:
    description: Info License Identifier
    message: Info Has License Identifier
    given: $.info.license
    severity: info
    then:
      field: identifier
      function: falsy
  openapi-info-license-name-error:
    description: Info License Name
    message: Info MUST Have License Name
    given: $.info.license
    severity: error
    then:
      field: name
      function: truthy
  openapi-info-license-name-info:
    description: Has info license name.
    message: Info License Name
    given: $.info.license
    severity: info
    then:
      field: name
      function: falsy
  openapi-info-license-url-error:
    description: Info License URL
    message: Info MUST Have License URL
    given: $.info.license
    severity: error
    then:
      field: url
      function: truthy
  openapi-info-license-url-info:
    description: Info License URL
    message: Info Has License URL
    given: $.info.license
    severity: info
    then:
      field: url
      function: falsy
  openapi-info-terms-of-service-error:
    description: Info Terms of Service
    message: Info MUST Have Terms of Service
    severity: error
    given: $.info
    then:
      field: termsOfService
      function: truthy
  openapi-info-terms-of-service-info:
    description: Info Terms of Service
    message: Info Has Terms of Service
    severity: info
    given: $.info
    then:
      field: termsOfService
      function: falsy
  openapi-info-title-error:
    description: Info Title
    message: Info MUST Have Title
    severity: error
    given: $.info
    then:
      field: title
      function: truthy
  openapi-info-title-info:
    description: Info Title
    message: Info Has Title
    severity: info
    given: $.info
    then:
      field: title
      function: falsy
  openapi-info-title-length-error:
    description: Info Title Length
    message: Info Title MUST Be Less Than 50 Characters
    severity: error
    given: $.info
    then:
      field: title
      function: length
      functionOptions:
        max: 50
  openapi-info-title-upper-case-error:
    description: Info Title Upper Case
    message: Info Title Has First Characters Capitalized
    severity: error
    given: $.info.title
    then:
      function: pattern
      functionOptions:
        match: '[A-Z]\w*'
  openapi-info-title-upper-case-info:
    description: Info Title Upper Case
    message: Info Title MUST Have First Characters Capitalized
    severity: info
    given: $.info.title
    then:
      function: pattern
      functionOptions:
        notMatch: '[A-Z]\w*'
  openapi-info-version-error:
    description: Info Versions
    message: Info MUST Have Version
    given: $.info
    severity: error
    then:
      field: version
      function: truthy
  openapi-info-version-info:
    description: Info Versions
    message: Info Has Version
    given: $.info
    severity: info
    then:
      field: version
      function: falsy
  openapi-version-date-info:
    description: Has date versioning.
    message: Date Versioning
    severity: info
    given: $.info.version
    then:
      function: pattern
      functionOptions:
        notMatch: ^([12]\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\d|3[01]))?$
  openapi-version-semantic-info:
    description: Has semantic versioning.
    message: Semantic Versioning
    severity: info
    given: $.info.version
    then:
      function: pattern
      functionOptions:
        notMatch: >-
          ^(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)(-(0|[1-9A-Za-z-][0-9A-Za-z-]*)(\.[0-9A-Za-z-]+)*)?(\+[0-9A-Za-z-]+(\.[0-9A-Za-z-]+)*)?$      
  openapi-no-api-in-path-error:
    description: Require no api in path.
    message: No API in Path
    severity: error
    given: $.paths.*~
    then:
      function: pattern
      functionOptions:
        match: ^\b(API|api)\b
  openapi-no-api-in-path-info:
    description: Has no api in path.
    message: No API in Path
    severity: info
    given: $.paths.*~
    then:
      function: pattern
      functionOptions:
        notMatch: \b(API|api)\b
  openapi-no-path-trailing-slash-error:
    description: Warn trailing slash on path.
    message: Path Trailing Slash
    severity: error
    given: $.paths.*~
    then:
      function: pattern
      functionOptions:
        notMatch: /$
  openapi-no-path-trailing-slash-info:
    description: Info trailing slash on path.
    message: Path Trailing Slash
    severity: info
    given: $.paths.*~
    then:
      function: pattern
      functionOptions:
        match: /$
  openapi-version-in-path-error:
    description: Has no version in path.
    message: Version in Path
    severity: error
    given: $.paths[*]~
    then:
      function: pattern
      functionOptions:
        notMatch: /((?:/)(v|version)?[0-9]{1,3}(?:/)?)/i
  openapi-version-in-path-info:
    description: Has no version in path.
    message: Version in Path
    severity: info
    given: $.paths[*]~
    then:
      function: pattern
      functionOptions:
        match: /((?:/)(v|version)?[0-9]{1,3}(?:/)?)/i
  openapi-operation-security-definitions-error:
    description: Operation Security Definition
    message: Operations MUST Have a Security Definition
    severity: error
    given: $.paths.*[get,post,patch,put,delete]
    then:
      field: security
      function: truthy
  openapi-operation-security-definitions-info:
    description: Operation Security Definition
    message: Operations MUST Have a Security Definition
    severity: info
    given: $.paths.*[get,post,patch,put,delete]
    then:
      field: security
      function: falsy
  openapi-operations-description-error:
    description: Operation Description
    message: Operation MUST Have Description
    severity: error
    given: $.paths.*[get,post,patch,put,delete]
    then:
      - field: description
        function: truthy
  openapi-operations-description-info:
    description: Operation Description
    message: Operation Has Description
    severity: info
    given: $.paths.*[get,post,patch,put,delete]
    then:
      - field: description
        function: falsy
  openapi-operations-description-length-error:
    description: Operation Description
    message: Operation Description MUST Be Less Than 250 Characters
    given: $.paths.*[get,post,patch,put,delete]
    then:
      - field: description
        function: length
        functionOptions:
          max: 250
  openapi-operations-operation-ids-error:
    description: Operation ID
    message: Operation MUST Have Identifier
    severity: error
    given: $.paths.*[get,post,patch,put,delete]
    then:
      - field: operationId
        function: truthy
  openapi-operations-operation-ids-info:
    description: Operation ID
    message: Operation Has Identifier
    severity: info
    given: $.paths.*[get,post,patch,put,delete]
    then:
      - field: operationId
        function: falsy
  openapi-operations-operation-ids-camel-case-error:
    description: Operation ID Casing
    message: Operation Identifier MUST Be camelCase
    severity: error
    given: $.paths.*[get,post,patch,put,delete].operationId
    then:
      - function: pattern
        functionOptions:
          notMatch: ^[a-z]+(?:[A-Z][a-z]+)*$
      - function: pattern
        functionOptions:
          match: ^[A-Z](([a-z0-9]+[A-Z]?)*)$ 
  openapi-operations-operation-ids-camel-case-info:
    description: Operation ID Casing
    message: Operation Identifier Is camelCase
    severity: info
    given: $.paths.*[get,post,patch,put,delete].operationId
    then:
      - function: pattern
        functionOptions:
          notMatch: ^[a-z]+(?:[A-Z][a-z]+)*$
      - function: pattern
        functionOptions:
          match: ^[A-Z](([a-z0-9]+[A-Z]?)*)$ 
  openapi-operations-summary-error:
    description: Operation Summary
    message: Operation MUST Have a Summary
    severity: error
    given: $.paths.*[get,post,patch,put,delete]
    then:
      - field: summary
        function: truthy
  openapi-operations-summary-info:
    description: Operation Summary
    message: Operation Has a Summary
    severity: info
    given: $.paths.*[get,post,patch,put,delete]
    then:
      - field: summary
        function: falsy
  openapi-operations-summary-length-error:
    description: Operation Summary Length
    message: Operation Summary MUST Be Less Than 50 Characters
    given: $.paths.*[get,post,patch,put,delete]
    then:
      - field: summary
        function: length
        functionOptions:
          max: 50
    type: style
  openapi-operations-summary-period-none-error:
    description: Operation Summary Period
    message: Operation MUST Not Have a Period.
    severity: error
    given: $.paths[*][*].summary
    then:
      function: pattern
      functionOptions:
        notMatch: \.$
  openapi-operations-summary-period-none-info:
    description: Operation Summary Period
    message: Operation Has a Period.
    severity: info
    given: $.paths[*][*].summary
    then:
      function: pattern
      functionOptions:
        match: \.$
  openapi-operations-tags-error:
    description: Operation Tags
    message: Operations MUST Have Tags
    severity: error
    given: $.paths.*[get,post,patch,put,delete]
    then:
      - field: tags
        function: truthy
  openapi-operations-tags-info:
    description: Operation Tags
    message: Operations Has Tags
    severity: info
    given: $.paths.*[get,post,patch,put,delete]
    then:
      - field: tags
        function: falsy
  openapi-operations-tags-one-error:
    description: Operation Tags One
    message: MUST Be At Least One Operation Tag
    given: $.paths.*[get,post,patch,put,delete]
    severity: error
    then:
      field: tags
      function: length
      functionOptions:
        min: 1
  openapi-operations-tags-upper-case-error:
    description: Operation Tags Casing
    message: Operation Tag Names MUST Have First Letter in Each Word Capitalized
    severity: error
    given: $.paths.*[get,post,patch,put,delete].tags.*
    then:
      function: pattern
      functionOptions:
        match: '[A-Z]\w*'
  openapi-operations-tags-upper-case-info:
    description: Tags Name Casing
    message: Operation Tag Names Have First Letter in Each Word Capitalized
    severity: info
    given: $.paths.*[get,post,patch,put,delete].tags.*
    then:
      function: pattern
      functionOptions:
        notMatch: '[A-Z]\w*'
  openapi-parameters-componentized-error:
    description: Parameters should be componentized.
    message: Parameters MUST use components $ref.
    severity: error
    resolved: false
    given: $.paths.*.*.parameters.*
    then:
      field: $ref
      function: truthy
  openapi-parameters-componentized-info:
    description: Parameters should be componentized.
    message: Parameters use components $ref.
    severity: info
    resolved: false
    given: $.paths.*.*.parameters.*
    then:
      field: $ref
      function: falsy
  openapi-no-request-body-on-delete-error:
    description: Requires no request body on DELETE
    message: DELETE Request Body
    given: $.paths.*.delete
    severity: error
    then:
      field: requestBody
      function: falsy
  openapi-no-request-body-on-delete-info:
    description: Has no request body on DELETE
    message: DELETE Request Body
    given: $.paths.*.delete
    severity: info
    then:
      field: requestBody
      function: truthy
  openapi-no-request-body-on-get-error:
    description: Requires no request body on GET
    message: GET Request Body
    given: $.paths.*.get
    severity: error
    then:
      field: requestBody
      function: falsy
  openapi-no-request-body-on-get-info:
    description: Has no request body on DELETE
    message: GET Request Body
    given: $.paths.*.get
    severity: info
    then:
      field: requestBody
      function: truthy
  openapi-request-bodies-description-error:
    description: Request Bodies Description
    message: Request Bodies MUST Have a Description
    severity: error
    given: $.paths.*.requestBody
    then:
      field: description
      function: truthy
  openapi-request-bodies-description-info:
    description: Request Bodies Description
    message: Request Bodies Have a Description
    severity: info
    given: $.paths.*.requestBody
    then:
      field: description
      function: falsy
  openapi-request-bodies-required-property-error:
    description: Require request body required.
    message: REQUEST BODIES Required
    severity: error
    given: $.paths.*.requestBody
    then:
      field: required
      function: falsy
  openapi-request-bodies-required-property-info:
    description: Has request body required.
    message: REQUEST BODIES Required
    severity: info
    given: $.paths.*.requestBody
    then:
      field: required
      function: truthy
  openapi-request-body-content-on-post-error:
    description: Requires request body content on POST.
    message: Request Body Content POST
    given: $.paths.*.post.requestBody
    severity: error
    then:
      field: content
      function: truthy
  openapi-request-body-content-on-post-info:
    description: Requires request body content on POST.
    message: Request Body Content POST
    given: $.paths.*.post.requestBody
    severity: info
    then:
      field: content
      function: falsy
  openapi-request-body-content-on-put-error:
    description: Requires request body content on PUT.
    message: Request Body Content PUT
    given: $.paths.*.put.requestBody
    severity: error
    then:
      field: content
      function: truthy
  openapi-request-body-content-on-put-info:
    description: Requires request body content on PUT.
    message: Request Body Content PUT
    given: $.paths.*.put.requestBody
    severity: info
    then:
      field: content
      function: falsy
  openapi-request-body-have-application-json-info:
    description: Has request body application/json.
    message: Request Body Application JSON
    given: $.paths.*.*.requestBody.content
    severity: info
    then:
      field: application/json
      function: falsy
  openapi-request-body-have-application-x-www-form-url-encoded-info:
    description: Has request body application/x-www-form-urlencoded.
    message: Request Body Application X WWW Form URL Encoded
    given: $.paths.*.*.requestBody.content
    severity: info
    then:
      field: application/x-www-form-urlencoded
      function: falsy
  openapi-request-body-have-schema-error:
    description: Request Bodies Schema
    message: Request Body Schema
    given: $.paths.*.*.requestBody.content.*
    severity: error
    then:
      field: schema
      function: truthy
  openapi-request-body-have-schema-info:
    description: Has request body schema.
    message: Request Body Schema
    given: $.paths.*.*.requestBody.content.*
    severity: info
    then:
      field: schema
      function: falsy
  openapi-request-body-have-schema-ref-error:
    description: Request Bodies Schema Reference
    message: Request Bodies MUST Use Schema Reference
    severity: error
    given: $.paths.*.*.requestBody.content.*.schema
    then:
      field: $ref
      function: falsy
  openapi-request-body-have-schema-ref-info:
    description: Request Bodies Schema Reference
    message: Request Bodies Use Schema Reference
    severity: info
    given: $.paths.*.*.requestBody.content.*.schema
    then:
      field: $ref
      function: truthy
  openapi-request-body-have-examples-error:
    description: Request Body Examples
    message: Request Bodies MUST Have Examples
    given: $.paths.*.*.requestBody.content.*
    severity: error
    then:
      field: examples
      function: truthy
  openapi-request-body-have-examples-info:
    description: Request Body Examples
    message: Request Bodies Have Examples
    given: $.paths.*.*.requestBody.content.*
    severity: info
    then:
      field: examples
      function: falsy
  openapi-request-body-have-examples-ref-error:
    description: Request Bodies Examples Reference
    message: Request Bodies MUST Use Examples Reference
    severity: error
    given: $.paths.*.*.requestBody.content.*.examples
    then:
      field: $ref
      function: falsy
  openapi-request-body-have-examples-ref-info:
    description: Request Bodies Examples Reference
    message: Request Bodies Use Examples Reference
    severity: info
    given: $.paths.*.*.requestBody.content.*.examples
    then:
      field: $ref
      function: truthy
  openapi-response-get-200-status-code-error:
    description: GET 200 Status Codes
    message: GET Responses MUST Have 200 Status Codes
    severity: error
    given: $.paths.*.get.responses
    then:
      field: '200'
      function: truthy
  openapi-response-get-200-status-code-info:
    description: Ensures GET operations have a 200 status code response.
    message: GET Responses Has 200 Status Codes
    severity: info
    given: $.paths.*.get.responses
    then:
      field: '200'
      function: falsy
  openapi-response-get-200-description-error:
    description: GET 200 Description
    message: GET 200 Response MUST have description.
    severity: error
    given: $.paths.*.get.responses.200
    then:
      field: description
      function: truthy
  openapi-response-get-200-description-info:
    description: GET 200 Description
    message: GET 200 Response has description.
    severity: info
    given: $.paths.*.get.responses.200
    then:
      field: description
      function: falsy
  openapi-response-get-200-content-error:
    description: GET 200 Content
    message: GET 200 Response MUST Have Content.
    severity: error
    given: $.paths.*.get.responses.200
    then:
      field: content
      function: truthy
  openapi-response-get-200-content-info:
    description: GET 200 Content
    message: GET 200 Response Has Content.
    severity: info
    given: $.paths.*.get.responses.200
    then:
      field: content
      function: falsy
  openapi-response-get-200-media-type-error:
    description: GET 200 Media Type
    message: GET 200 Response MUST Have Media Type.
    severity: error
    given: $.paths.*.get.responses.200.content
    then:
      field: application/json
      function: truthy
  openapi-response-get-200-media-type-info:
    description: GET 200 Media Type
    message: GET 200 Response Has Media Type.
    severity: info
    given: $.paths.*.get.responses.200.content
    then:
      field: application/json
      function: falsy
  openapi-response-get-200-media-type-schema-error:
    description: GET 200 Schema
    message: GET 200 Response MUST Have Schema
    severity: error
    given: $.paths.*.get.responses.200.content['application/json']
    then:
      field: schema
      function: truthy
  openapi-response-get-200-media-type-schema-info:
    description: GET 200 Schema
    message: GET 200 Response Has Schema
    severity: info
    given: $.paths.*.get.responses.200.content['application/json']
    then:
      field: schema
      function: falsy
  openapi-response-get-200-media-type-schema-ref-error:
    description: GET 200 Schema Reference
    message: GET 200 Responses MUST Use Schema Reference
    severity: error
    given: $.paths.*.get.responses.200.content['application/json'].schema
    then:
      field: $ref
      function: falsy
  openapi-response-get-200-media-type-schema-ref-info:
    description: GET 200 Schema Reference
    message: GET 200 Responses Uses Schema Reference
    severity: info
    given: $.paths.*.get.responses.200.content['application/json'].schema
    then:
      field: $ref
      function: truthy
  openapi-response-get-200-media-type-examples-error:
    description: GET 200 Examples
    message: GET 200 Response MUST Have Examples
    severity: error
    given: $.paths.*.get.responses.200.content['application/json']
    then:
      field: examples
      function: truthy
  openapi-response-get-200-media-type-examples-info:
    description: GET 200 Examples
    message: GET 200 ResponseHas Examples
    severity: info
    given: $.paths.*.get.responses.200.content['application/json']
    then:
      field: examples
      function: falsy
  openapi-response-get-200-media-type-examples-ref-error:
    description: GET 200 Examples Reference
    message: GET 200 Responses MUST Use Examples Reference
    severity: error
    given: $.paths.*.get.responses.200.content['application/json'].examples.*
    then:
      field: $ref
      function: falsy
  openapi-response-get-200-media-type-examples-ref-info:
    description: GET 200 Examples Reference
    message: GET 200 Responses Uses Examples Reference
    severity: info
    given: $.paths.*.get.responses.200.content['application/json'].examples.*
    then:
      field: $ref
      function: truthy
  openapi-response-get-400-status-code-error:
    description: GET 400 Status Codes
    message: GET Responses MUST Have 400 Status Codes
    severity: error
    given: $.paths.*.get.responses
    then:
      field: '400'
      function: truthy
  openapi-response-get-400-status-code-info:
    description: GET 400 Status Codes
    message: GET Responses Has 400 Status Codes
    severity: info
    given: $.paths.*.get.responses
    then:
      field: '400'
      function: falsy
  openapi-response-get-400-schema-ref-error:
    description: GET 400 Schema Reference
    message: GET 400 Responses MUST Use Schema Reference
    severity: error
    given: $.paths.*.get.responses.400
    then:
      field: $ref
      function: falsy
  openapi-response-get-400-schema-ref-info:
    description: GET 400 Schema Reference
    message: GET 400 Responses Uses Schema Reference
    severity: info
    given: $.paths.*.get.responses.400
    then:
      field: $ref
      function: truthy
  openapi-response-get-401-status-code-info:
    description: GET 401 Status Codes
    message: GET Responses MUST Have 401 Status Code
    severity: info
    given: $.paths.*.get.responses
    then:
      field: '401'
      function: falsy
  openapi-response-get-401-status-code-error:
    description: GET 401 Status Codes
    message: GET Responses Has 401 Status Code
    severity: error
    given: $.paths.*.get.responses
    then:
      field: '401'
      function: truthy
  openapi-response-get-401-schema-ref-error:
    description: GET 401 Schema Reference
    message: GET 401 Responses MUST Use Schema Reference
    severity: error
    given: $.paths.*.get.responses.401
    then:
      field: $ref
      function: falsy
  openapi-response-get-401-schema-ref-info:
    description: GET 401 Schema Reference
    message: GET 401 Responses Has Schema Reference
    severity: info
    given: $.paths.*.get.responses.401
    then:
      field: $ref
      function: truthy
  openapi-response-get-403-status-code-info:
    description: GET 403 Status Codes
    message: GET Responses MUST Have 403 Status Code
    severity: info
    given: $.paths.*.get.responses
    then:
      field: '403'
      function: falsy
  openapi-response-get-403-status-code-error:
    description: GET 403 Status Codes
    message: GET Responses Has 403 Status Code
    severity: error
    given: $.paths.*.get.responses
    then:
      field: '403'
      function: truthy
  openapi-response-get-403-schema-ref-error:
    description: GET 403 Schema Reference
    message: GET 403 Responses MUST Use Schema Reference
    severity: error
    given: $.paths.*.get.responses.403
    then:
      field: $ref
      function: falsy
  openapi-response-get-403-schema-ref-info:
    description: GET 403 Schema Reference
    message: GET 403 Responses Uses Schema Reference
    severity: info
    given: $.paths.*.get.responses.403
    then:
      field: $ref
      function: truthy
  openapi-response-get-404-status-code-error:
    description: GET 404 Status Codes
    message: GET Responses MUST Have 404 Status Code
    severity: error
    given: $.paths.*.get[?(@.properties)]
    then:
      field: '404'
      function: truthy
  openapi-response-get-404-status-code-info:
    description: GET 404 Status Codes
    message: GET Responses Has 404 Status Code
    severity: info
    given: $.paths.*.get[?(@.properties)]
    then:
      field: '404'
      function: falsy
  openapi-response-get-404-schema-ref-error:
    description: GET 404 Schema Reference
    message: GET 404 Responses MUST Use Schema Reference
    severity: error
    given: $.paths.*.get.responses.404
    then:
      field: $ref
      function: falsy
  openapi-response-get-404-schema-ref-info:
    description: GET 404 Schema Reference
    message: GET 404 Responses Uses Schema Reference
    severity: info
    given: $.paths.*.get.responses.404
    then:
      field: $ref
      function: truthy
  openapi-response-get-429-status-code-info:
    description: GET 429 Status Codes
    message: GET Responses MUST Have 429 Status Code
    severity: info
    given: $.paths.*.get.responses
    then:
      field: '429'
      function: falsy
  openapi-response-get-429-status-code-error:
    description: GET 429 Status Codes
    message: GET Responses Has 429 Status Code
    severity: error
    given: $.paths.*.get.responses
    then:
      field: '429'
      function: truthy
  openapi-response-get-429-schema-ref-error:
    description: GET 429 Schema Reference
    message: GET 429 Responses MUST Use Schema Reference
    severity: error
    given: $.paths.*.get.responses.429
    then:
      field: $ref
      function: falsy
  openapi-response-get-429-schema-ref-info:
    description: GET 429 Schema Reference
    message: GET 429 Responses Uses Schema Reference
    severity: info
    given: $.paths.*.get.responses.429
    then:
      field: $ref
      function: truthy
  openapi-response-get-500-status-code-error:
    description: GET 500 Status Codes
    message: GET Responses MUST Have 500 Status Code
    severity: error
    given: $.paths.*.get.responses
    then:
      field: '500'
      function: truthy
  openapi-response-get-500-status-code-info:
    description: GET 500 Status Codes
    message: GET Responses Has 500 Status Code
    severity: info
    given: $.paths.*.get.responses
    then:
      field: '500'
      function: falsy
  openapi-response-get-500-schema-ref-error:
    description: GET 500 Schema Reference
    message: GET 500 Responses MUST Use Schema Reference
    severity: error
    given: $.paths.*.get.responses.500
    then:
      field: $ref
      function: falsy
  openapi-response-get-500-schema-ref-info:
    description: GET 500 Schema Reference
    message: GET 500 Responses Uses Schema Reference
    severity: info
    given: $.paths.*.get.responses.500
    then:
      field: $ref
      function: truthy
  openapi-request-body-on-post-error:
    description: POST Request Body
    message: POST Requests MUST Have a Body
    given: $.paths.*.post
    severity: error
    then:
      field: requestBody
      function: truthy
  openapi-request-body-on-post-info:
    description: POST Request Body
    message: POST Requests Has a Body
    given: $.paths.*.post
    severity: info
    then:
      field: requestBody
      function: falsy
  openapi-response-post-201-status-code-error:
    description: POST 201 Status Codes
    message: POST Responses MUST Have 201 Status Codes
    severity: error
    given: $.paths[*].post.responses
    then:
      field: '201'
      function: truthy
  openapi-response-post-201-status-code-info:
    description: POST 201 Status Codes
    message: POST Responses Has 201 Status Codes
    severity: info
    given: $.paths[*].post.responses
    then:
      field: '201'
      function: falsy
  openapi-response-post-201-description-error:
    description: POST 201 Response Description
    message: POST 201 Responses MUST Have Description
    severity: error
    given: $.paths.*.post.responses.201
    then:
      field: description
      function: truthy
  openapi-response-post-201-description-info:
    description: POST 201 Response Description
    message: POST 201 Responses Has Description
    severity: info
    given: $.paths.*.post.responses.201
    then:
      field: description
      function: falsy
  openapi-response-post-201-content-error:
    description: POST 201 Response Content
    message: POST 201 Responses MUST Have Content
    severity: error
    given: $.paths.*.post.responses.201
    then:
      field: content
      function: truthy
  openapi-response-post-201-content-info:
    description: POST 201 Response Content
    message: POST 201 Responses Has Content
    severity: info
    given: $.paths.*.post.responses.201
    then:
      field: content
      function: falsy
  openapi-response-post-201-media-type-error:
    description: POST 201 Response Media Type
    message: POST 201 Responses MUST Have Media Type
    severity: error
    given: $.paths.*.post.responses.201.content
    then:
      field: application/json
      function: truthy
  openapi-response-post-201-media-type-info:
    description: POST 201 Response Media Type
    message: POST 201 Responses Has Media Type
    severity: info
    given: $.paths.*.post.responses.201.content
    then:
      field: application/json
      function: falsy
  openapi-response-post-201-media-type-schema-error:
    description: POST 201 Response Schema
    message: POST 201 Responses MUST Have Schema
    severity: error
    given: $.paths.*.post.responses.201.content.application/json
    then:
      field: schema
      function: truthy
  openapi-response-post-201-media-type-schema-info:
    description: POST 201 Response Schema
    message: POST 201 Responses Has Schema
    severity: info
    given: $.paths.*.post.responses.201.content.application/json
    then:
      field: schema
      function: falsy
  openapi-response-post-201-schema-ref-error:
    description: POST 201 Schema Reference
    message: POST 201 Responses MUST Use Schema Reference
    given: $.paths.*.post.responses.201.content.*.schema
    severity: error
    then:
      field: $ref
      function: falsy
  openapi-response-post-201-schema-ref-info:
    description: POST 201 Schema Reference
    message: POST 201 Responses Has Schema Reference
    given: $.paths.*.post.responses.201.content.*.schema
    severity: info
    then:
      field: $ref
      function: truthy
  openapi-response-post-201-media-type-examples-error:
    description: POST 201 Response Examples
    message: POST 201 Responses MUST Have Examples
    severity: error
    given: $.paths.*.post.responses.201.content.application/json
    then:
      field: examples
      function: truthy
  openapi-response-post-201-media-type-examples-info:
    description: POST 201 Response Examples
    message: POST 201 Responses Has Examples
    severity: info
    given: $.paths.*.post.responses.201.content.application/json
    then:
      field: examples
      function: falsy
  openapi-response-post-201-examples-ref-error:
    description: POST 201 Examples Reference
    message: POST 201 Responses MUST Use Examples Reference
    given: $.paths.*.post.responses.201.content.*.examples
    severity: error
    then:
      field: $ref
      function: falsy
  openapi-response-post-201-examples-ref-info:
    description: POST 201 Examples Reference
    message: POST 201 Responses Has Examples Reference
    given: $.paths.*.post.responses.201.content.*.examples
    severity: info
    then:
      field: $ref
      function: truthy
  openapi-response-post-400-status-code-info:
    description: POST 400 Status Codes
    message: POST Responses MUST Have 400 Status Codes
    severity: info
    given: $.paths.*.post.responses
    then:
      field: '400'
      function: falsy
  openapi-response-post-400-status-code-error:
    description: POST 400 Status Codes
    message: POST Responses Has 400 Status Codes
    severity: error
    given: $.paths.*.post.responses
    then:
      field: '400'
      function: truthy
  openapi-response-post-400-schema-ref-error:
    description: POST 400 Schema Reference
    message: POST 400 Responses MUST Use Schema Reference
    severity: error
    given: $.paths.*.post.responses.400
    then:
      field: $ref
      function: falsy
  openapi-response-post-400-schema-ref-info:
    description: POST 400 Schema Reference
    message: POST 400 Responses Uses Schema Reference
    severity: info
    given: $.paths.*.post.responses.400
    then:
      field: $ref
      function: truthy
  openapi-response-post-401-status-code-info:
    description: POST 401 Status Codes
    message: POST Responses MUST Have 401 Status Codes
    severity: info
    given: $.paths.*.post.responses
    then:
      field: '401'
      function: falsy
  openapi-response-post-401-status-code-error:
    description: POST 401 Status Codes
    message: POST Responses Has 401 Status Codes
    severity: error
    given: $.paths.*.post.responses
    then:
      field: '401'
      function: truthy
  openapi-response-post-401-schema-ref-error:
    description: POST 401 Schema Reference
    message: POST 401 Responses MUST Use Schema Reference
    severity: error
    given: $.paths.*.post.responses.401
    then:
      field: $ref
      function: falsy
  openapi-response-post-401-schema-ref-info:
    description: POST 401 Schema Reference
    message: POST 401 Responses Uses Schema Reference
    severity: info
    given: $.paths.*.post.responses.401
    then:
      field: $ref
      function: truthy
  openapi-response-post-403-status-code-info:
    description: POST 403 Status Codes
    message: POST Responses MUST Have 403 Status Codes
    severity: info
    given: $.paths.*.post.responses
    then:
      field: '403'
      function: falsy
  openapi-response-post-403-status-code-error:
    description: POST 403 Status Codes
    message: POST Responses Has 403 Status Codes
    severity: error
    given: $.paths.*.post.responses
    then:
      field: '403'
      function: truthy
  openapi-response-post-403-schema-ref-error:
    description: POST 403 Schema Reference
    message: POST 403 Responses MUST Use Schema Reference
    severity: error
    given: $.paths.*.post.responses.403
    then:
      field: $ref
      function: falsy
  openapi-response-post-403-schema-ref-info:
    description: POST 403 Schema Reference
    message: POST 403 Responses Uses Schema Reference
    severity: info
    given: $.paths.*.post.responses.403
    then:
      field: $ref
      function: truthy
  openapi-response-post-404-status-code-info:
    description: POST 404 Status Codes
    message: POST Responses MUST Have 404 Status Codes
    severity: info
    given: $.paths.*.post.responses
    then:
      field: '404'
      function: falsy
  openapi-response-post-404-status-code-error:
    description: POST 404 Status Codes
    message: POST Responses Has 404 Status Codes
    severity: error
    given: $.paths.*.post.responses
    then:
      field: '404'
      function: truthy
  openapi-response-post-404-schema-ref-error:
    description: POST 404 Schema Reference
    message: POST 404 Responses MUST Use Schema Reference
    severity: error
    given: $.paths.*.post.responses.404
    then:
      field: $ref
      function: falsy
  openapi-response-post-404-schema-ref-info:
    description: POST 404 Schema Reference
    message: POST 404 Responses Uses Schema Reference
    severity: info
    given: $.paths.*.post.responses.404
    then:
      field: $ref
      function: truthy
  openapi-response-post-429-status-code-error:
    description: POST 429 Status Codes
    message: POST Responses MUST Have 429 Status Codes
    severity: error
    given: $.paths.*.post.responses
    then:
      field: '429'
      function: truthy
  openapi-response-post-429-status-code-info:
    description: POST 429 Status Codes
    message: POST Responses Has 429 Status Codes
    severity: info
    given: $.paths.*.post.responses
    then:
      field: '429'
      function: falsy
  openapi-response-post-429-schema-ref-error:
    description: POST 429 Schema Reference
    message: POST 429 Responses MUST Use Schema Reference
    severity: error
    given: $.paths.*.post.responses.429
    then:
      field: $ref
      function: falsy
  openapi-response-post-429-schema-ref-info:
    description: POST 429 Schema Reference
    message: POST 429 Responses Uses Schema Reference
    severity: info
    given: $.paths.*.post.responses.429
    then:
      field: $ref
      function: truthy
  openapi-response-post-500-status-code-error:
    description: POST 500 Status Codes
    message: POST Responses MUST Have 500 Status Codes
    severity: error
    given: $.paths.*.post.responses
    then:
      field: '500'
      function: truthy
  openapi-response-post-500-status-code-info:
    description: POST 500 Status Codes
    message: POST Responses Has 500 Status Codes
    severity: info
    given: $.paths.*.post.responses
    then:
      field: '500'
      function: falsy
  openapi-response-post-500-schema-ref-error:
    description: POST 500 Schema Reference
    message: POST 500 Responses MUST Use Schema Reference
    severity: error
    given: $.paths.*.post.responses.500
    then:
      field: $ref
      function: falsy
  openapi-response-post-500-schema-ref-info:
    description: POST 500 Schema Reference
    message: POST 500 Responses Uses Schema Reference
    severity: info
    given: $.paths.*.post.responses.500
    then:
      field: $ref
      function: truthy
  openapi-request-body-on-put-error-info:
    description: PUT Request Body
    message: PUT Requests MUST Have a Body
    given: $.paths.*.put
    severity: error
    then:
      field: requestBody
      function: truthy
  openapi-request-body-on-put-info:
    description: PUT Request Body
    message: PUT Requests Has a Body
    given: $.paths.*.put
    severity: error
    then:
      field: requestBody
      function: falsy
  openapi-response-put-204-no-body-error:
    description: PUT 204 No Body
    message: PUT 204 Responses MUST Have a Request Body
    severity: error
    given: $.paths.*.put.responses.204
    then:
      field: content
      function: falsy
  openapi-response-put-204-status-code-error:
    description: Require 204 status code for PUT responses.
    message: PUT 204 Status Code
    severity: error
    given: $.paths.*.put.responses
    then:
      field: '204'
      function: truthy
  openapi-response-put-204-status-code-info:
    description: Has 204 status code for PUT responses.
    message: PUT 204 Status Code
    severity: info
    given: $.paths.*.put.responses
    then:
      field: '204'
      function: falsy
  openapi-response-put-400-status-code-error:
    description: PUT 400 Status Codes
    message: PUT Responses MUST Have 400 Status Codes
    severity: error
    given: $.paths.*.put.responses
    then:
      field: '400'
      function: truthy
  openapi-response-put-400-status-code-info:
    description: PUT 400 Status Codes
    message: PUT Responses Has 400 Status Codes
    severity: info
    given: $.paths.*.put.responses
    then:
      field: '400'
      function: falsy
  openapi-response-put-400-schema-ref-error:
    description: PUT 400 Schema Reference
    message: PUT 400 Responses MUST Use Schema Reference
    severity: error
    given: $.paths.*.put.responses.400
    then:
      field: $ref
      function: falsy
  openapi-response-put-400-schema-ref-info:
    description: PUT 400 Schema Reference
    message: PUT 400 Responses Uses Schema Reference
    severity: info
    given: $.paths.*.put.responses.400
    then:
      field: $ref
      function: truthy
  openapi-response-put-401-status-code-error:
    description: PUT 401 Status Codes
    message: PUT Responses MUST 401 400 Status Codes
    severity: error
    given: $.paths.*.put.responses
    then:
      field: '401'
      function: truthy
  openapi-response-put-401-status-code-info:
    description: PUT 401 Status Codes
    message: PUT Responses Has 401 Status Codes
    severity: info
    given: $.paths.*.put.responses
    then:
      field: '401'
      function: falsy
  openapi-response-put-401-schema-ref-error:
    description: PUT 401 Schema Reference
    message: PUT 401 Responses MUST Use Schema Reference
    severity: error
    given: $.paths.*.put.responses.401
    then:
      field: $ref
      function: falsy
  openapi-response-put-401-schema-ref-info:
    description: PUT 401 Schema Reference
    message: PUT 401 Responses Uses Schema Reference
    severity: info
    given: $.paths.*.put.responses.401
    then:
      field: $ref
      function: truthy
  openapi-response-put-403-status-code-error:
    description: PUT 403 Status Codes
    message: PUT Responses MUST Have 403 Status Codes
    severity: error
    given: $.paths.*.put.responses
    then:
      field: '403'
      function: truthy
  openapi-response-put-403-status-code-info:
    description: PUT 403 Status Codes
    message: PUT Responses Has 403 Status Codes
    severity: info
    given: $.paths.*.put.responses
    then:
      field: '403'
      function: falsy
  openapi-response-put-403-schema-ref-error:
    description: PUT 403 Schema Reference
    message: PUT 403 Responses MUST Use Schema Reference
    severity: error
    given: $.paths.*.put.responses.403
    then:
      field: $ref
      function: falsy
  openapi-response-put-403-schema-ref-info:
    description: PUT 403 Schema Reference
    message: PUT 403 Responses Uses Schema Reference
    severity: info
    given: $.paths.*.put.responses.403
    then:
      field: $ref
      function: truthy
  openapi-response-put-404-status-code-error:
    description: PUT 403 Status Codes
    message: PUT Responses MUST Have 403 Status Codes
    severity: error
    given: $.paths.*.put.responses
    then:
      field: '404'
      function: truthy
  openapi-response-put-404-status-code-info:
    description: PUT 403 Status Codes
    message: PUT Responses Has 403 Status Codes
    severity: info
    given: $.paths.*.put.responses
    then:
      field: '404'
      function: falsy
  openapi-response-put-404-schema-ref-error:
    description: PUT 404 Schema Reference
    message: PUT 404 Responses MUST Use Schema Reference
    severity: error
    given: $.paths.*.put.responses.404
    then:
      field: $ref
      function: falsy
  openapi-response-put-404-schema-ref-info:
    description: PUT 404 Schema Reference
    message: PUT 404 Responses Uses Schema Reference
    severity: info
    given: $.paths.*.put.responses.404
    then:
      field: $ref
      function: truthy
  openapi-response-put-429-status-code-error:
    description: PUT 429 Status Codes
    message: PUT Responses MUST Have 429 Status Codes
    severity: error
    given: $.paths.*.put.responses
    then:
      field: '429'
      function: truthy
  openapi-response-put-429-status-code-info:
    description: PUT 429 Status Codes
    message: PUT Responses Has 429 Status Codes
    severity: info
    given: $.paths.*.put.responses
    then:
      field: '429'
      function: falsy
  openapi-response-put-429-schema-ref-error:
    description: PUT 429 Schema Reference
    message: PUT 429 Responses MUST Use Schema Reference
    severity: error
    given: $.paths.*.put.responses.429
    then:
      field: $ref
      function: falsy
  openapi-response-put-429-schema-ref-info:
    description: PUT 429 Schema Reference
    message: PUT 429 Responses Uses Schema Reference
    severity: info
    given: $.paths.*.put.responses.429
    then:
      field: $ref
      function: truthy
  openapi-response-put-500-status-code-error:
    description: PUT 500 Status Codes
    message: PUT Responses MUST Have 500 Status Codes
    severity: error
    given: $.paths.*.put.responses
    then:
      field: '500'
      function: truthy
  openapi-response-put-500-status-code-info:
    description: PUT 500 Status Codes
    message: PUT Responses Has 500 Status Codes
    severity: info
    given: $.paths.*.put.responses
    then:
      field: '500'
      function: falsy
  openapi-response-put-500-schema-ref-error:
    description: PUT 500 Schema Reference
    message: PUT 500 Responses MUST Use Schema Reference
    severity: error
    given: $.paths.*.put.responses.500
    then:
      field: $ref
      function: falsy
  openapi-response-put-500-schema-ref-info:
    description: PUT 500 Schema Reference
    message: PUT 500 Responses Uses Schema Reference
    severity: info
    given: $.paths.*.put.responses.500
    then:
      field: $ref
      function: truthy
  openapi-response-delete-204-no-body-error:
    description: Require no body for DELETE responses.
    message: No Response Body DELETE
    severity: error
    given: $.paths.*.delete.responses.204
    then:
      field: content
      function: falsy
  openapi-response-delete-204-status-code-error:
    description: Require 204 status code for DELETE responses.
    message: DELETE 204 Status Code
    severity: info
    given: $.paths.*.delete.responses
    then:
      field: '204'
      function: truthy
  openapi-response-delete-204-status-code-info:
    description: Has 204 status code for DELETE responses.
    message: DELETE 204 Status Code
    severity: info
    given: $.paths.*.delete.responses
    then:
      field: '204'
      function: falsy
  openapi-response-delete-400-status-code-error:
    description: DELETE 400 Status Codes
    message: DELETE Responses MUST Have 400 Status Codes
    severity: error
    given: $.paths.*.delete.responses
    then:
      field: '400'
      function: truthy
  openapi-response-delete-400-status-code-info:
    description: DELETE 400 Status Codes
    message: DELETE Responses Has 400 Status Codes
    severity: info
    given: $.paths.*.delete.responses
    then:
      field: '400'
      function: falsy
  openapi-response-delete-400-schema-ref-error:
    description: DELETE 400 Schema Reference
    message: DELETE 400 Responses MUST Use Schema Reference
    severity: error
    given: $.paths.*.delete.responses.400
    then:
      field: $ref
      function: falsy
  openapi-response-delete-400-schema-ref-info:
    description: DELETE 400 Schema Reference
    message: DELETE 400 Responses Use Schema Reference
    severity: info
    given: $.paths.*.delete.responses.400
    then:
      field: $ref
      function: truthy
  openapi-response-delete-401-status-code-error:
    description: DELETE 401 Status Codes
    message: DELETE Responses MUST Have 401 Status Codes
    severity: error
    given: $.paths.*.delete.responses
    then:
      field: '401'
      function: truthy
  openapi-response-delete-401-status-code-info:
    description: DELETE 401 Status Codes
    message: DELETE Responses Has 401 Status Codes
    severity: info
    given: $.paths.*.delete.responses
    then:
      field: '401'
      function: falsy
  openapi-response-delete-401-schema-ref-error:
    description: DELETE 401 Schema Reference
    message: DELETE 401 Responses MUST Use Schema Reference
    severity: error
    given: $.paths.*.delete.responses.401
    then:
      field: $ref
      function: falsy
  openapi-response-delete-401-schema-ref-info:
    description: DELETE 401 Schema Reference
    message: DELETE 401 Responses Uses Schema Reference
    severity: info
    given: $.paths.*.delete.responses.401
    then:
      field: $ref
      function: truthy
  openapi-response-delete-403-status-code-error:
    description: DELETE 403 Status Codes
    message: DELETE Responses MUST Have 403 Status Codes
    severity: error
    given: $.paths.*.delete.responses
    then:
      field: '403'
      function: truthy
  openapi-response-delete-403-status-code-info:
    description: DELETE 403 Status Codes
    message: DELETE Responses Has 403 Status Codes
    severity: info
    given: $.paths.*.delete.responses
    then:
      field: '403'
      function: falsy
  openapi-response-delete-403-schema-ref-error:
    description: DELETE 403 Schema Reference
    message: DELETE 403 Responses MUST Use Schema Reference
    severity: error
    given: $.paths.*.delete.responses.403
    then:
      field: $ref
      function: falsy
  openapi-response-delete-403-schema-ref-info:
    description: DELETE 403 Schema Reference
    message: DELETE 403 Responses Uses Schema Reference
    severity: info
    given: $.paths.*.delete.responses.403
    then:
      field: $ref
      function: truthy
  openapi-response-delete-404-status-code-error:
    description: DELETE 404 Status Codes
    message: DELETE Responses MUST Have 404 Status Codes
    severity: error
    given: $.paths.*.delete.responses
    then:
      field: '404'
      function: truthy
  openapi-response-delete-404-status-code-info:
    description: DELETE 404 Status Codes
    message: DELETE Responses Has 404 Status Codes
    severity: info
    given: $.paths.*.delete.responses
    then:
      field: '404'
      function: falsy
  openapi-response-delete-404-schema-ref-error:
    description: DELETE 404 Schema Reference
    message: DELETE 404 Responses MUST Use Schema Reference
    severity: error
    given: $.paths.*.delete.responses.404
    then:
      field: $ref
      function: falsy
  openapi-response-delete-404-schema-ref-info:
    description: DELETE 404 Schema Reference
    message: DELETE 404 Responses Uses Schema Reference
    severity: info
    given: $.paths.*.delete.responses.404
    then:
      field: $ref
      function: truthy
  openapi-response-delete-429-status-code-error:
    description: DELETE 429 Status Codes
    message: DELETE Responses MUST Have 429 Status Codes
    severity: error
    given: $.paths.*.delete.responses
    then:
      field: '429'
      function: truthy
  openapi-response-delete-429-status-code-info:
    description: DELETE 429 Status Codes
    message: DELETE Responses Has 429 Status Codes
    severity: info
    given: $.paths.*.delete.responses
    then:
      field: '429'
      function: falsy
  openapi-response-delete-429-schema-ref-error:
    description: DELETE 429 Schema Reference
    message: DELETE 429 Responses MUST Use Schema Reference
    severity: error
    given: $.paths.*.delete.responses.429
    then:
      field: $ref
      function: falsy
  openapi-response-delete-429-schema-ref-info:
    description: DELETE 429 Schema Reference
    message: DELETE 429 Responses Uses Schema Reference
    severity: info
    given: $.paths.*.delete.responses.429
    then:
      field: $ref
      function: truthy
  openapi-response-delete-500-status-code-error:
    description: DELETE 500 Status Codes
    message: DELETE Responses MUST Have 500 Status Codes
    severity: error
    given: $.paths.*.delete.responses
    then:
      field: '500'
      function: truthy
  openapi-response-delete-500-status-code-info:
    description: DELETE 500 Status Codes
    message: DELETE Responses MUST Have 500 Status Codes
    severity: info
    given: $.paths.*.delete.responses
    then:
      field: '500'
      function: falsy
  openapi-response-delete-500-schema-ref-error:
    description: DELETE 500 Schema Reference
    message: DELETE 500 Responses MUST Use Schema Reference
    severity: error
    given: $.paths.*.delete.responses.500
    then:
      field: $ref
      function: falsy
  openapi-response-delete-500-schema-ref-info:
    description: DELETE 500 Schema Reference
    message: DELETE 500 Responses Uses Schema Reference
    severity: info
    given: $.paths.*.delete.responses.500
    then:
      field: $ref
      function: truthy
  openapi-schema-description-error:
    description: Schema Descriptions
    message: Schema MUST Have a Description.
    severity: error
    given: $.components.schemas.*
    then:
      field: description
      function: truthy
  openapi-schema-description-info:
    description: Schema Descriptions
    message: Schemas Has a Description.
    severity: info
    given: $.components.schemas.*
    then:
      field: description
      function: falsy
  openapi-schema-description-length-error:
    description: Schema Description Length
    message: Schema Description MUST be Less Than 250 Characters
    severity: error
    given: $.components.schemas.*
    then:
      field: description
      function: length
      functionOptions:
        max: 250
  openapi-schema-names-pascal-case-error:
    description: Schema Names
    message: Schema Names MUST Be PascalCase.
    severity: error
    given: $.components.schemas
    then:
      - field: '@key'
        function: pattern
        functionOptions:
          match: ^[A-Z](([a-z]+[A-Z]?)*)$
      - field: '@key'
        function: pattern
        functionOptions:
          match: ^[A-Z](([a-z0-9]+[A-Z]?)*)$
  openapi-schema-names-pascal-case-info:
    description: Schema Names
    message: Schema Names Are PascalCase.
    severity: info
    given: $.components.schemas
    then:
      - field: '@key'
        function: pattern
        functionOptions:
          notMatch: ^[A-Z](([a-z]+[A-Z]?)*)$
      - field: '@key'
        function: pattern
        functionOptions:
          notMatch: ^[A-Z](([a-z0-9]+[A-Z]?)*)$
  openapi-schema-names-length-error:
    description: Schema Name Length
    message: Schema Names MUST Be Less Than 25 Characters
    severity: error
    given: $.components.schemas
    then:
      field: '@key'
      function: length
      functionOptions:
        max: 25
  openapi-schema-properties-allowed-integer-format-error:
    description: Integer Format
    message: Type Format MUST Be int32 or int64.
    severity: hint
    given: $.components.schemas.*.properties[?(@.type=="integer")]
    then:
      field: format
      function: enumeration
      functionOptions:
        values:
          - int32
          - int64
  openapi-schema-properties-allowed-number-format-error:
    description: Number Format
    message: Schema Properties MUST Have Format
    severity: hint
    given: $.components.schemas.*.properties[?(@.type=="number")]
    then:
      field: format
      function: enumeration
      functionOptions:
        values:
          - decimal32
          - decimal64
          - float
          - double
          - decimal128
  openapi-schema-properties-array-items-error:
    description: Schema Property Array Items
    message: Schema Array Properties MUST Have Items
    severity: error
    given: $.components.schemas.*.properties[?(@.type=="array")]
    then:
      field: items
      function: truthy
  openapi-schema-properties-array-items-info:
    description: Schema Property Array Items
    message: Schema Array Properties Has Items
    severity: info
    given: $.components.schemas.*.properties[?(@.type=="array")]
    then:
      field: items
      function: falsy
  openapi-schema-properties-array-maxitems-error:
    description: Schema Property Array Max Items
    message: Schema Array Properties MUST Have Max Items
    severity: error
    given: $.components.schemas.*.properties[?(@.type=="array")]
    then:
      - field: maxItems
        function: truthy
  openapi-schema-properties-array-maxitems-info:
    description: Schema Property Array Max Items
    message: Schema Array Properties Have Max Items
    severity: info
    given: $.components.schemas.*.properties[?(@.type=="array")]
    then:
      - field: maxItems
        function: truthy
  openapi-schema-properties-array-minitems-error:
    description: Schema Property Array Min Items
    message: Schema Array Properties MUST Have Min Items
    severity: error
    given: $.components.schemas.*.properties[?(@.type=="array")]
    then:
      - field: minItems
        function: truthy
  openapi-schema-properties-array-minitems-info:
    description: Schema Property Array Min Items
    message: Schema Array Properties Have Min Items
    severity: info
    given: $.components.schemas.*.properties[?(@.type=="array")]
    then:
      - field: minItems
        function: falsy
  openapi-schema-properties-define-number-maximum-error:
    description: Schema Property Number Maximum
    message: Schema Number Properties MUST Have Maximum
    severity: error
    given: $.components.schemas.*.properties[?(@.type=="number")]
    then:
      - field: maximum
        function: defined
  openapi-schema-properties-define-number-minimum-error:
    description: Schema Property Number Minimum
    message: Schema Number Properties MUST Have Minimum
    severity: error
    given: $.components.schemas.*.properties[?(@.type=="number")]
    then:
      - field: minimum
        function: defined
  openapi-schema-properties-descriptions-error:
    description: Schema Properties Description
    message: Schema Properties MUST Have Description
    severity: error
    given: $.components.schemas.*.properties[?(@.type == 'string')]
    then:
      field: description
      function: truthy
  openapi-schema-properties-descriptions-info:
    description: Schema Properties Description
    message: Schema Properties Have Description
    severity: info
    given: $.components.schemas.*.properties[?(@.type == 'string')]
    then:
      field: description
      function: falsy
  openapi-schema-properties-descriptions-length-error:
    description: Schema Properties Description Length
    message: Schema Properties Description MUST Have 250 Characters
    severity: error
    given: $.components.schemas.*.properties[?(@.type == 'string')]
    then:
      field: description
      function: length
      functionOptions:
        max: 250
  openapi-schema-properties-enum-casing-error:
    description: Schema Properties Enum Casing
    message: Schema Property Enum MUST Be Upper Snake Case
    severity: error
    given: $.components.schemas.*.properties.*.enum.*
    then:
      function: pattern
      functionOptions:
        match: ^[A-Z]+(?:_[A-Z]+)*$
  openapi-schema-properties-enum-casing-info:
    description: Schema Properties Enum Casing
    message: Schema Property Enum Are Upper Snake Case
    severity: error
    given: $.components.schemas.*.properties.*.enum.*
    then:
      function: pattern
      functionOptions:
        notMatch: ^[A-Z]+(?:_[A-Z]+)*$
  openapi-schema-properties-enum-info:
    description: Schema Properties Enum
    message: Schema Property Have Enum
    severity: info
    given: $.components.schemas.*.properties.*
    then:
      - field: enum
        function: falsy
  openapi-schema-properties-error:
    description: Schema Properties
    message: Schema MUST Have Properties
    severity: error
    given: $.components.schemas[?(@.type=="object")]
    then:
      field: properties
      function: truthy
  openapi-schema-properties-info:
    description: Schema Properties
    message: Schema Have Properties
    severity: info
    given: $.components.schemas[?(@.type=="object")]
    then:
      field: properties
      function: falsy      
  openapi-schema-properties-names-camel-case-error:
    description: Schema Property Name Casing
    message: Schema Property Names MUST Be camelCase.
    severity: error
    given: $.components.schemas.*.properties
    then:
      - field: '@key'
        function: pattern
        functionOptions:
          notMatch: ^[A-Z][a-z0-9]*[A-Z0-9][a-z0-9]+[A-Za-z0-9]*$      
  openapi-schema-properties-names-camel-case-info:
    description: Schema Property Name Casing
    message: Schema Property Names Are camelCase.
    severity: info
    given: $.components.schemas.*.properties
    then:
      - field: '@key'
        function: pattern
        functionOptions:
          match: ^[A-Z][a-z0-9]*[A-Z0-9][a-z0-9]+[A-Za-z0-9]*$
  openapi-schema-properties-names-length-error:
    description: Requires schema properties names length.
    message: Schema Properties Name Length
    severity: error
    given: $.components.schemas.*.properties
    then:
      field: '@key'
      function: length
      functionOptions:
        max: 25
  openapi-schema-properties-string-maxlength-error:
    message: Schema Properties String Max Length
    description: Schema String Properties MUST Have Max Length
    severity: error
    given: $.components.schemas.*.properties[?(@.type == 'string')]
    then:
      field: maxLength
      function: truthy
  openapi-schema-properties-string-maxlength-info:
    message: Schema Properties String Max Length
    description: Schema String Properties Have Max Length
    severity: info
    given: $.components.schemas.*.properties[?(@.type == 'string')]
    then:
      field: maxLength
      function: falsy
  openapi-schema-properties-string-minlength-error:
    message: Schema Properties String Min Length
    description: Schema String Properties MUST Have Min Length
    severity: error
    given: $.components.schemas.*.properties[?(@.type == 'string')]
    then:
      field: minLength
      function: truthy
  openapi-schema-properties-string-minlength-info:
    message: Schema Properties String Min Length
    description: Schema String Properties Have Min Length
    severity: info
    given: $.components.schemas.*.properties[?(@.type == 'string')]
    then:
      field: minLength
      function: falsy
  openapi-schema-required-error:
    description: Schema Required
    message: Schema MUST Have Required Property
    severity: error
    given: $.components.schemas[?(@.type=="object")]
    then:
      field: required
      function: truthy
  openapi-schema-required-info:
    description: Schema Required
    message: Schema Has Required Property
    severity: info
    given: $.components.schemas[?(@.type=="object")]
    then:
      field: required
      function: falsy
  openapi-schema-type-error:
    description: Schema Type
    message: Schema MUST Have Type Property
    severity: error
    given: $.components.schemas.*
    then:
      field: type
      function: truthy
  openapi-schema-type-info:
    description: Schema Type
    message: Schema Has Type Property
    severity: info
    given: $.components.schemas.*
    then:
      field: type
      function: falsy
  openapi-tags-description-error:
    description: Tag Description
    message: Tags MUST Have a Description
    given: $.tags[*]
    severity: error
    then:
      field: description
      function: truthy
  openapi-tags-description-info:
    description: Tag Description
    message: Tags Have a Description
    given: $.tags[*]
    severity: info
    then:
      field: description
      function: falsy
  openapi-tags-name-error:
    description: Tag Name
    message: Tags MUST Have a Name
    given: $.tags[*]
    severity: error
    then:
      field: name
      function: truthy
  openapi-tags-name-info:
    description: Tag Name
    message: Tags Have a Name
    given: $.tags[*]
    severity: info
    then:
      field: name
      function: falsy
  openapi-tags-object-error:
    description: Tag Object
    message: OpenAPIs MUST Have a Tag Object
    given: $
    severity: error
    then:
      field: tags
      function: truthy
  openapi-tags-object-info:
    description: Tag Object
    message: OpenAPIs Have a Tag Object
    given: $
    severity: info
    then:
      field: tags
      function: falsy
  openapi-tags-one-error:
    description: Tags One
    message: MUST Be At Least One Tag
    given: $
    severity: error
    then:
      field: tags
      function: length
      functionOptions:
        min: 1
  openapi-tags-upper-case-error:
    description: Tags Name Casing
    message: Tag Names MUST Have First Letter in Each Word Capitalized
    severity: error
    given: $.tags.*.name
    then:
      function: pattern
      functionOptions:
        match: '[A-Z]\w*'